const fs = require('fs');
const path = require('path');

// –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
const DOCS_DIR = path.join(__dirname, '..', 'docs', 'architecture');
const DOCUMENTATION_DIR = path.join(__dirname, '..', 'documentation');
const TEMPLATE_PATH = path.join(__dirname, '..', 'src', 'static', 'architecture.template.html');
const OUTPUT_DIR = path.join(DOCUMENTATION_DIR, 'architecture');
const OUTPUT_PATH = path.join(OUTPUT_DIR, 'index.html');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–∑ markdown
function extractComponentsFromMarkdown(mdContent) {
  // Extract title (first # line)
  const titleMatch = mdContent.match(/^# (.+)$/m);
  const title = titleMatch ? titleMatch[1] : 'Untitled';

  // Extract description (text between **Description:** and ```mermaid)
  const descMatch = mdContent.match(/\*\*Description:\*\* ([^]*?)(?=```mermaid)/);
  const description = descMatch ? descMatch[1].trim() : '';

  // Extract mermaid diagram
  const mermaidMatch = mdContent.match(/```mermaid\n([\s\S]*?)\n```/);
  if (!mermaidMatch) {
    throw new Error('No mermaid diagram found in markdown');
  }
  const diagram = mermaidMatch[1].trim();

  // Extract features/notes (everything after the mermaid diagram)
  const afterMermaid = mdContent.split('```')[2]; // Get content after closing ```
  const features = afterMermaid ? afterMermaid.trim() : '';

  return { title, description, diagram, features };
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function buildArchitecturePage() {
  console.log('üöÄ Building architecture page from markdown files...');

  try {
    // –ß–∏—Ç–∞–µ–º markdown —Ñ–∞–π–ª—ã
    const contextMd = fs.readFileSync(path.join(DOCS_DIR, '01-context.md'), 'utf8');
    const containerMd = fs.readFileSync(path.join(DOCS_DIR, '02-container.md'), 'utf8');
    const backendMd = fs.readFileSync(path.join(DOCS_DIR, '03-component-backend.md'), 'utf8');
    const frontendMd = fs.readFileSync(path.join(DOCS_DIR, '03-component-frontend.md'), 'utf8');
    const sequenceMd = fs.readFileSync(path.join(DOCS_DIR, '04-sequence-game-flow.md'), 'utf8');

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ markdown —Ñ–∞–π–ª–æ–≤
    const context = extractComponentsFromMarkdown(contextMd);
    const container = extractComponentsFromMarkdown(containerMd);
    const backend = extractComponentsFromMarkdown(backendMd);
    const frontend = extractComponentsFromMarkdown(frontendMd);
    const sequence = extractComponentsFromMarkdown(sequenceMd);

    // –ß–∏—Ç–∞–µ–º —à–∞–±–ª–æ–Ω HTML
    let htmlTemplate = fs.readFileSync(TEMPLATE_PATH, 'utf8');

    // –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
    htmlTemplate = htmlTemplate
      .replace('{{CONTEXT_TITLE}}', context.title)
      .replace('{{CONTEXT_DESCRIPTION}}', context.description)
      .replace('{{CONTEXT_DIAGRAM}}', context.diagram)
      .replace('{{CONTEXT_FEATURES}}', context.features)

      .replace('{{CONTAINER_TITLE}}', container.title)
      .replace('{{CONTAINER_DESCRIPTION}}', container.description)
      .replace('{{CONTAINER_DIAGRAM}}', container.diagram)
      .replace('{{CONTAINER_FEATURES}}', container.features)

      .replace('{{BACKEND_TITLE}}', backend.title)
      .replace('{{BACKEND_DESCRIPTION}}', backend.description)
      .replace('{{BACKEND_DIAGRAM}}', backend.diagram)
      .replace('{{BACKEND_FEATURES}}', backend.features)

      .replace('{{FRONTEND_TITLE}}', frontend.title)
      .replace('{{FRONTEND_DESCRIPTION}}', frontend.description)
      .replace('{{FRONTEND_DIAGRAM}}', frontend.diagram)
      .replace('{{FRONTEND_FEATURES}}', frontend.features)

      .replace('{{SEQUENCE_TITLE}}', sequence.title)
      .replace('{{SEQUENCE_DESCRIPTION}}', sequence.description)
      .replace('{{SEQUENCE_DIAGRAM}}', sequence.diagram)
      .replace('{{SEQUENCE_FEATURES}}', sequence.features);

    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!fs.existsSync(OUTPUT_DIR)) {
      fs.mkdirSync(OUTPUT_DIR, { recursive: true });
    }

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≥–æ—Ç–æ–≤—ã–π HTML
    fs.writeFileSync(OUTPUT_PATH, htmlTemplate);

    console.log('‚úÖ Architecture page built successfully!');
    console.log(`üìù Generated: ${OUTPUT_PATH}`);
    console.log('üìä Included diagrams:');
    console.log('  - 01-context.md');
    console.log('  - 02-container.md');
    console.log('  - 03-component-backend.md');
    console.log('  - 03-component-frontend.md');
    console.log('  - 04-sequence-game-flow.md');

  } catch (error) {
    console.error('‚ùå Error building architecture page:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º
buildArchitecturePage();
