/**
 * Player Property Deck Component Styles
 *
 * Creates a card game hand-like arrangement of property cards at the bottom of the screen.
 * Features hover effects, animations, and responsive design.
 *
 * @generated This file was generated by AI (GitHub Copilot)
 */

.property-deck {
  position: fixed;
  bottom: 20px;
  left: 50%;
  transform: translateX(-50%);
  z-index: 100;
  pointer-events: auto;
}

.property-cards-container {
  display: flex;
  justify-content: center;
  align-items: flex-end;
  height: 190px;
  perspective: 1000px;
}

.property-card {
  --card-width: 130px;
  --card-height: 170px;
  --hover-scale: 1.3;
  --hover-offset: -40px;
  --spread-angle: 15deg;
  --base-rotation: calc((var(--card-index) - (var(--total-cards) - 1) / 2) * var(--spread-angle) / var(--total-cards));
  --x-offset: calc((var(--card-index) - (var(--total-cards) - 1) / 2) * 20px);

  position: relative;
  width: var(--card-width);
  height: var(--card-height);
  margin: 0 -15px;
  cursor: pointer;
  transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  transform-origin: bottom center;

  // Base card positioning in hand
  transform:
    translateX(var(--x-offset))
    rotate(var(--base-rotation))
    translateY(calc(abs(var(--base-rotation)) * 2));

  // Hover effects
  &.hovered {
    z-index: 1000;
    transform:
      translateX(var(--x-offset))
      translateY(var(--hover-offset))
      rotate(0deg)
      scale(var(--hover-scale));

    .property-svg {
      filter: drop-shadow(0 10px 20px rgba(0, 0, 0, 0.3));
    }
  }

  // Ensure non-hovered cards stay in place when one is hovered
  &:not(.hovered) {
    z-index: 1;
  }
}

.property-svg {
  width: 100%;
  height: 100%;
  transition: filter 0.3s ease;

  // Base shadow for card separation
  filter: drop-shadow(0 0px 10px rgba(0, 0, 0, 0.5));

  // Card styling
  rect {
    filter: drop-shadow(1px 2px 4px rgba(0, 0, 0, 0.1));
  }

  text {
    user-select: none;
    pointer-events: none;
  }
}

.no-properties {
  position: fixed;
  bottom: 20px;
  left: 50%;
  transform: translateX(-50%);
  background: rgba(0, 0, 0, 0.7);
  color: white;
  padding: 10px 20px;
  border-radius: 8px;
  font-family: Arial, sans-serif;
  font-size: 14px;
  z-index: 100;

  p {
    margin: 0;
  }
}

// Responsive adjustments
@media (max-width: 768px) {
  .property-card {
    --card-width: 110px;
    --card-height: 150px;
    --spread-angle: 20deg;
    margin: 0 -20px;
  }

  .property-cards-container {
    height: 170px;
  }
}

@media (max-width: 480px) {
  .property-card {
    --card-width: 90px;
    --card-height: 130px;
    --spread-angle: 25deg;
    margin: 0 -25px;
  }

  .property-cards-container {
    height: 150px;
  }
}// Animation for cards entering/leaving
@keyframes cardSlideIn {
  from {
    opacity: 0;
    transform:
      translateX(var(--x-offset))
      translateY(100px)
      rotate(var(--base-rotation))
      scale(0.8);
  }
  to {
    opacity: 1;
    transform:
      translateX(var(--x-offset))
      rotate(var(--base-rotation))
      translateY(calc(abs(var(--base-rotation)) * 2));
  }
}

.property-card {
  animation: cardSlideIn 0.5s ease-out;
  animation-delay: calc(var(--card-index) * 0.1s);
  animation-fill-mode: both;
}
