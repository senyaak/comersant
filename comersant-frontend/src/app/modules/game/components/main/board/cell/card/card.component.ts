// This content is generated by AI
import { Component, Input, OnInit } from '@angular/core';
import {
  CardEventCell,
  CardEventCellTypes,
  EventCell,
} from '$server/modules/game/models/FieldModels/cells';

import { BaseComponent } from '../abstract/base';

@Component({
  selector: '[app-card-cell]',
  templateUrl: './card.component.html',
  styleUrl: './card.component.scss',
  standalone: false,
})
export class CardComponent extends BaseComponent implements OnInit {
  @Input({ required: true }) cell!: EventCell;

  public color: string = 'black';
  public label: string = 'EVENT';

  public positionY: number = this.offset + this.height * 0.75;

  ngOnInit() {
    if (this.cell instanceof CardEventCell) {
      // console.log('-> ', this, this.cell.name, this.cell.type);
      this.label = this.cell.type;
    } else {
      console.log(this.cell);
      throw new Error('HANDLE OTHER EVENT ');
    }
  }

  // Center of the compass-rose symbol
  get cx(): number {
    return this.x + this.width / 2;
  }

  get cy(): number {
    return this.offset + this.height / 2 + 20;
  }

  get isRiskCard(): boolean {
    return (
      this.cell instanceof CardEventCell &&
      this.cell.type === CardEventCellTypes.risk
    );
  }

  // Points for the inner irregular red shape
  get riskInnerShapePoints(): string {
    const points = [
      '-15,-15',
      '5,-18',
      '10,-5',
      '25,5',
      '15,15',
      '-5,10',
      '-20,5',
      '-25,-5',
    ];
    return points.join(' ');
  }

  // Points for the outer 8-point star outline
  get riskStarPoints(): string {
    return this.starPoints(40, 25, 0);
  }

  // Build an 8-pointed star as a 16-vertex polygon (alternating radii)
  private starPoints(outer: number, inner: number, rotationDeg: number): string {
    const steps = 16; // outer/inner alternating points
    const rot = (rotationDeg * Math.PI) / 180;
    const pts: string[] = [];

    for (let i = 0; i < steps; i++) {
      const angle = rot + (i * 2 * Math.PI) / steps;
      const r = i % 2 === 0 ? outer : inner;
      const x = r * Math.cos(angle);
      const y = r * Math.sin(angle);
      pts.push(`${x},${y}`);
    }

    return pts.join(' ');
  }
}
